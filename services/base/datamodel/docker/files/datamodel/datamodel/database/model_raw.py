import enum
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy import *
from sqlalchemy.orm import (scoped_session, sessionmaker, relationship,
                            backref)
from sqlalchemy.ext.declarative import declarative_base
from .base import Base
from .type import DataType, StorageLocation


# class Folder(Base):
#     __tablename__ = 'folder'
#     id = Column(Integer, primary_key=True)
#     name = Column(String(255))
#     data_type = Column(Enum(DataType))
#     storage_location = Column(Enum(StorageLocation))
#     storage_path = Column(String(255))
#     datanode_id = Column(Integer, ForeignKey('dataNode.id'))
#     datanode = relationship("DataNode", back_populates="folders")
#     files = relationship("File", back_populates="folder", cascade="all, delete-orphan")
#     parent_folder = relationship("Folder", backref="child_folders", remote_side=[id])
#     parent_folder_id = Column(Integer, ForeignKey('folder.id'))
#     dataentity_id = Column(Integer, ForeignKey('dataentity.id'))
#     data_entity = relationship("DataEntity", back_populates="folder", cascade="delete")

cohort = Table('cohort', Base.metadata,
                                 Column('foreign_entity_id', BigInteger, ForeignKey('dataentity.id')),
                                 Column('dataset_id', Integer, ForeignKey('dataset.id'))
                                 )

class Dataset(Base):
    __tablename__ = 'dataset'
    id = Column(Integer, primary_key=True)
    name = Column(String(255))
    search_query = Column(String(255))
    #foreign_entity_id = Column(Integer, ForeignKey("dataentity.id"))
    set_entities = relationship("DataEntity", secondary=cohort)
    #foreign ids are only stored in the set table, not referenced in the dataentity.
    dataentity_id = Column(BigInteger, ForeignKey("dataentity.id"))
    data_entity = relationship("DataEntity", back_populates="dataset", cascade="delete", foreign_keys=dataentity_id)
    # not user set, generated by the datamodel itself
    generated = Column(Boolean)
    # smallest combined set unit/item
    unit = Column(Boolean)
    meta = Column(JSONB)


experiment_entities = Table('experiment_entities', Base.metadata,
                                 Column('foreign_entity_id', BigInteger, ForeignKey('dataentity.id')),
                                 Column('experiment_id', Integer, ForeignKey('experiment.id'))
                                 )

result_entities = Table('result_entities', Base.metadata,
                                 Column('foreign_entity_id', BigInteger, ForeignKey('dataentity.id')),
                                 Column('experiment_id', Integer, ForeignKey('experiment.id'))
                                 )
class Experiment(Base):
    __tablename__ = 'experiment'
    id = Column(Integer, primary_key=True)
    dataentity_id = Column(BigInteger, ForeignKey("dataentity.id"))
    data_entity = relationship("DataEntity", back_populates="experiment", cascade="delete", foreign_keys=[dataentity_id])
    result_entities = relationship("DataEntity", secondary=result_entities)
    experiment_entities = relationship("DataEntity", secondary=experiment_entities)
    method = Column(String(255))
    meta = Column(JSONB)



class File(Base):
    __tablename__ = 'file'
    id = Column(BigInteger, primary_key=True)
    path = Column(String(255))
    location = Column(String(64))
    dataentity_id = Column(BigInteger, ForeignKey('dataentity.id'))
    data_entity = relationship("DataEntity", back_populates="file", cascade="delete")
    dicom_series_id = Column(Integer, ForeignKey('dicom_series.id'))
    dicom_series = relationship("DicomSeries", back_populates="dicom_instances")
