---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: postgres-node-{{ .Values.global.id }}
  namespace: {{ .Values.global.base_namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app-name: postgres-node-{{ .Values.global.id }}
  template:
    metadata:
      labels:
        app-name: postgres-node-{{ .Values.global.id }}
    spec:
      restartPolicy: Always
      containers:
        - name: postgres
          image: {{ .Values.global.registry_url }}/postgres:9.6-alpine
          imagePullPolicy:  {{ .Values.global.pull_policy_pods }}
          args: ["-c", "max_connections=200"]
          ports:
            - containerPort: 5432
              protocol: TCP
          resources:
            requests:
              memory: 100Mi
            limits:
              memory: 500Mi
          volumeMounts:
            - name: dbvol
              mountPath: /var/lib/postgresql/data/pgdata
              subPath: pgdata
          env:
            - name: POSTGRES_USER
              value: node
            - name: POSTGRES_PASSWORD
              value: node
            - name: POSTGRES_DB
              value: node
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POD_IP
              valueFrom: { fieldRef: { fieldPath: status.podIP } }
          livenessProbe:
            initialDelaySeconds: 60
            timeoutSeconds: 5
            failureThreshold: 5
            exec:
              command:
              - /bin/sh
              - -c
              - exec pg_isready --host $POD_IP ||  if [[ $(psql -qtAc --host $POD_IP 'SELECT pg_is_in_recovery') != "f" ]]; then  exit 0 else; exit 1; fi
          readinessProbe:
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 5
            exec:
              command:
              - /bin/sh
              - -c
              - exec pg_isready --host $POD_IP
      volumes:
        - name: dbvol
          # emptyDir: {}
          hostPath:
            path: {{ .Values.global.fast_data_dir }}/postgres-node
            type: DirectoryOrCreate
      imagePullSecrets:
      - name: registry-secret
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-node-{{ .Values.global.id }}
  namespace: {{ .Values.global.base_namespace }}
spec:
  selector:
    app-name: postgres-node-{{ .Values.global.id }}
  ports:
    - port: 5432
      targetPort: 5432