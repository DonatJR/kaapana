# Template properties for mainzelliste
#
# The configuration listed here provides default values which should be suitable for
# a variety of szenarios. At least, the sections "Database setup" and "xDAT servers"
# should be adjusted to the local environment.

# General format: Key-value pairs, separated by spaces, tabs, "=", ":".
# Lines starting with "#" are comments. Comments appended to a line are not possible!
# See Javadoc for java.util.Properties#load(Reader) for details.

# Property names may contain letters, numbers, underscores and dots. Dots define a hierarchical
# structure on the property names.

# Leading and trailing whitespaces in property values are not allowed and will be removed
# after loading.

# For a comprehensive documentation of configuration parameters see the configuration manual
# ("Konfigurationshandbuch").

# debug mode: If set to true, token handling is disabled (i.e. no tokens are necessary).
debug = false

# Name of this mainzelliste distribution instance.
dist = Mainzelliste

# Database setup

# Uncomment this for PostgreSQL
db.driver = org.postgresql.Driver
db.url = jdbc:postgresql://postgres-mainzelliste-service.extensions.svc:5432/mainzelliste

# Uncomment this for MySQL
# db.driver = com.mysql.jdbc.Driver
# db.url = jdbc:mysql://localhost:3306/mainzelliste

db.username = root
db.password = root

# Logging
#
# By default, logs are written to stdout. Uncomment the following values to log to a file
# instead.
 
#log.filename = /var/log/tomcat6/mainzelliste.log
log.level = DEBUG

#performance tuning soundex-like blocking
#tuning.soundexblocking = false
#blocking.soundex.type = Soundex
#blocking.soundex.fields = vorname, nachname

# GCP Features
#
# Institutions in heavily regulated invironments, for example CROs or other facilities
# working in the field of clinical trials, have to fulfill restrictive requirements
# in terms of logging and comprehensibility whenever data is created, modified or simply viewed.
# (WHO Guidlines for GCP, ICH GCP E6 and others)
# A so-called audit trail is a common feature implemented by systems used to access or modify this
# kind of data.
# It typically stores timestamp, user/system identifier, record name, old value, new value, reason for change and the action taken.
#
# This property activates the mainzelliste audit trail feature which creates a new table in the database
# for storing those records. It further extends the token format to include audit trail information in the 'data' field:
#
# auditTrail: {
#   username: "foo_user",
#   remoteSystem: "bar_system",
#   reasonForChange: "reason"
# }
#
# PLEASE NOTE:
# When this option is active, requests to the system without a valid audit trail object
# inside the access token will be denied.

gcp.audittrail = false

# Field definitions
#
# Every input field must be defined here with field.{fieldname}.type = {fieldtype},
# where fieldname is a unique identifier and fieldtype the name of a subclass of Field.
# Input data from the field will be stored in objects of that class.
#
# Every field defined here must either be contained in the input form
# WEB-INF/jsp/patientFormElements.jsp (with corresponding "name"-Tag) or
# be provided in the createPatient Token

# In order to deactivate fields temporarily, it is sufficient to comment out the field definition.

field.vorname.type = PlainTextField
field.nachname.type = PlainTextField
field.geburtsname.type = PlainTextField
field.geburtstag.type = IntegerField
field.geburtsmonat.type = IntegerField
field.geburtsjahr.type = IntegerField
field.plz.type = PlainTextField
field.ort.type = PlainTextField
# field.geschlecht.type = PlainTextField
field.versicherungsnummer.type = PlainTextField

# To store the data in hashed form (control numbers) use the type ControlNumberField

# field.vorname.type = ControlNumberField
# field.nachname.type = ControlNumberField
# field.geburtsname.type = ControlNumberField
# field.geburtsdatum.type = ControlNumberField
# field.plz.type = ControlNumberField
# field.ort.type = ControlNumberField

# ! EXPERIMENTAL FEATURE ! configuration is subject to change in a future release. A migration guideline will be provided
# record bloom filter store specified fields in hashed form
# recordBloomFilter.fttp.generator = RandomRecordBloomFilterGenerator
# recordBloomFilter.fttp.length = 800
# recordBloomFilter.fttp.nGramLength = 2
# recordBloomFilter.fttp.randomPositionNumber = 8
# recordBloomFilter.fttp.vocabulary = ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789mfoux
# recordBloomFilter.fttp.field.vorname.seed = 897691691
# recordBloomFilter.fttp.field.nachname.seed = 126737169
# recordBloomFilter.fttp.field.geburtsdatum.seed = 287369196
# recordBloomFilter.fttp.field.geschlecht.seed = 263896898
# hardening technique
# recordBloomFilter.fttp.balanced.seed = 486486485
# specify the normalization of fields before the generation of bloom filter
# recordBloomFilter.fttp.field.vorname.transformer.0.type = StringFieldTransformer
# recordBloomFilter.fttp.field.vorname.transformer.0.replacement = {"Dr\\\\.|Prof\\\\.":"", "è":"ee","é":"ee","ä":"ae","Ä":"AE","ö":"oe","Ö":"OE","ü":"ue","Ü":"UE"}
# recordBloomFilter.fttp.field.vorname.transformer.0.upperCase = true
# recordBloomFilter.fttp.field.vorname.transformer.0.trim = true
# recordBloomFilter.fttp.field.vorname.transformer.1.type = StringFieldTransformer
# recordBloomFilter.fttp.field.vorname.transformer.1.allowedChars = [A-Z\\d.\\s]
# recordBloomFilter.fttp.field.nachname.transformer.0.type = StringFieldTransformer
# recordBloomFilter.fttp.field.nachname.transformer.0.replacement = {"Dr\\\\.|Prof\\\\.":"", "è":"ee", "é":"ee","ä":"ae","Ä":"AE","ö":"oe","Ö":"OE","ü":"ue","Ü":"UE"}
# recordBloomFilter.fttp.field.nachname.transformer.0.upperCase = true
# recordBloomFilter.fttp.field.nachname.transformer.0.trim = true
# recordBloomFilter.fttp.field.nachname.transformer.1.type = StringFieldTransformer
# recordBloomFilter.fttp.field.nachname.transformer.1.allowedChars = [A-Z\\d.\\s]
# recordBloomFilter.fttp.field.geburtsdatum.transformer.0.type = StringFieldConcatenation
# recordBloomFilter.fttp.field.geburtsdatum.transformer.0.source = geburtsjahr,geburtsmonat,geburtstag

# Server-side validation

# validator.field.{fieldname}.required: Whether a field must not be empty
validator.field.vorname.required = true
validator.field.nachname.required = true
validator.field.geburtstag.required = true
validator.field.geburtsmonat.required = true
validator.field.geburtsjahr.required = true
# validator.field.geschlecht.required = true

# validator.field.{fieldname}.format: Regular expresssion which a field must adhere to.

# Default: letters, dots, underscores, apostrophes, spaces; at least one letter.
validator.field.vorname.format = ^[A-Za-zäÄöÖüÜßéÉ\\.\\- ]*[A-Za-zäÄöÖüÜßéÉ]+[A-Za-zäÄöÖüÜßéÉ\\.\\- ]*$
validator.field.nachname.format = ^[A-Za-zäÄöÖüÜßéÉ\\.\\- ]*[A-Za-zäÄöÖüÜßéÉ]+[A-Za-zäÄöÖüÜßéÉ\\.\\- ]*$
validator.field.geburtsname.format = ^[A-Za-zäÄöÖüÜßéÉ\\.\\- ]*[A-Za-zäÄöÖüÜßéÉ]+[A-Za-zäÄöÖüÜßéÉ\\.\\- ]*$
# validator.field.geschlecht.format = [mfoux]

# Date validation:
# validator.date.{i}.fields defines a list of fields, separated by commas.
# The date string is formed by concatenation of these fields.
# validator.date.{i}.format: A format definition (see java.text.SimpleDateFormat) by
# which the date string is interpreted. Validation checks if the parsed date is valid.
# Set fields which form the date and the format (when concatenating the fields).
# Multiple dates can be specified by supplying multiple definitions with consecutive
# numbers as {i}

validator.date.0.fields = geburtstag, geburtsmonat, geburtsjahr
validator.date.0.format = ddMMyyyy



# Exchange groups
#
# An exchange group denotes a set of fields whose values are considered interchangeable.
# The matcher (currently only EpilinkMatcher) compares the fields in each exchange group to
# all of its permutations and uses the best matching combination for final decision.
#
# An exchange group is defined by exchangeGroup.{id} = {fieldlist}, where id is a sequential number
# and fieldlist a comma-separated list of field names
exchangeGroup.0 = vorname, nachname, geburtsname

# Field transformations
#
# Transformations for a field {fieldname} are defined by
# field.{fieldname}.transformers = {transformerlist}, where
# transformerlist is a comma-separated list of names of subclasses of FieldTransformer.
#
# The first transformer in the list is applied to the input field as defined in the field definition;
# i.e. the type parameter IN of the first transformer must match the class of the field.
# Every subsequent transformer is applied to the output of its predecessor; i.e. its type parameter IN
# must match type parameter OUT of the preceding transformer.

field.vorname.transformers = StringNormalizer, FirstNameDecomposer
field.nachname.transformers = StringNormalizer, GermanLastNameDecomposer
field.geburtsname.transformers = StringNormalizer, GermanLastNameDecomposer

# field comparators
field.vorname.comparator = NGramComparator
field.nachname.comparator = NGramComparator
field.geburtsname.comparator = NGramComparator

field.geburtstag.comparator = BinaryFieldComparator
field.geburtsmonat.comparator = BinaryFieldComparator
field.geburtsjahr.comparator = BinaryFieldComparator

field.plz.comparator = BinaryFieldComparator
field.ort.comparator = NGramComparator

# Use DiceField comparator instead of NGramComparator to apply EpilLink algorithm to hashed fields

# field.vorname.comparator = DiceFieldComparator


# Blocking
# The blocking strategy choice depends on the field types after the transformation.
# If compound fields are passed to the blocker, whether created by a field transformation or as input fields,
# the type of the subfields is the one that is relevant for the blocking.
# If exchange groups are used, only one of the fieldnames should be given here. The blocker is applied to
# the other fields as well.

# Use Soundex for PlainText fields
# blocking.soundex.type = Soundex
# With the default exchange group
# blocking.soundex.fields = nachname
# Without an exchange group
# blocking.soundex.fields = vorname, nachname, geburtsname


# Use FieldEquality e.g. for birthday based blocking
# This can be combined with Soundex blocking.
# blocking.dob.type = FieldEquality
# blocking.dob.fields = geburtstag, geburtsmonat, geburtsjahr

# FieldEquality can also be used for externally generated blocking keys
# The input field must of course be defined above.
# blocking.ext.type = FieldEquality
# blocking.ext.fields = extBlockingField


# Use HLsh for blocking on hashed fields
# blocking.lsh.type = HLsh
# blocking.lsh.fields = vorname, nachname, geburtsdatum
# The lengths of the above hashed fields
# blocking.lsh.bfSize = 384, 512, 512
# The lsh method defines the strategy for multiple fields.
# Depending on the expected quality of the fields select one of the following possibilities.
# General advise:
# High values for lshKeys can reduce false negatives, but will have a negative impact on the performance.
# High values for lshHashes can improve the performance, but can lead to more false negatives.

# Recommended: Fields with missing or dirty values
blocking.lsh.lshMethod = field
# Number of keys per field
blocking.lsh.lshKeys = 1
# Number of hash functions per field
blocking.lsh.lshHashes = 36

# Fields with few errors
# blocking.lsh.lshMethod = record
# Total number of keys
# blocking.lsh.lshKeys = 9
# Number of hash functions per field (can be used as a weight)
# blocking.lsh.lshHashes = 8, 8, 8

# The seed for the hash functions
blocking.lsh.seed = 42

# The following options can improve the performance by reducing the size of the blocks.
# The ratio of the frequent bit positions to ignore in the blocking keys (Choose 0 to deactivate the optimization)
# blocking.lsh.pruneRatio = 0.25
# Trigger the optimization on each startup of the Mainzelliste
# blocking.lsh.initialOptimization = true



# Matcher definition
# Property matcher defines the class name of the matcher to use, which must be a subclass
# of Matcher. Currently only EpilinkMatcher and NullMatcher are supported.
# Null matcher is used to skip the step of record linkage
matcher = EpilinkMatcher
# matcher = NullMatcher

# Config for Epilink Matcher
#
# matcher.epilink.{fieldname}.frequency: Defines the assumed mean frequency of values
# for field {fieldname}. This corresponds to the u-probability in the Fellegi-Sunter-Model
# and can be estimated by the reciprocal of the number of distinct values (i.e. the
# frequency of "month" is 1 / 12).
matcher.epilink.vorname.frequency = 0.000235
matcher.epilink.nachname.frequency = 0.0000271
matcher.epilink.geburtsname.frequency = 0.0000271

# 1 / 30 (approximate average number of days in a month)
matcher.epilink.geburtstag.frequency = 0.0333
# 1 / 12
matcher.epilink.geburtsmonat.frequency = 0.0833
# example value: birth years for an age range of 35 years (40 - 75).
matcher.epilink.geburtsjahr.frequency = 0.0286

matcher.epilink.plz.frequency = 0.01
matcher.epilink.ort.frequency = 0.01
matcher.epilink.geburtsdatum.frequency = 0.00007

# matcher.epilink.{fieldname}.error_rate defines the assumed error_rate for
# field {fieldname} (1 - m-probability)
#
# The supplied number stem from the evaluation of a German cancer registry
matcher.epilink.vorname.errorRate = 0.01
matcher.epilink.nachname.errorRate = 0.008
matcher.epilink.geburtsname.errorRate = 0.008
matcher.epilink.geburtstag.errorRate = 0.005
matcher.epilink.geburtsmonat.errorRate = 0.002
matcher.epilink.geburtsjahr.errorRate = 0.004
matcher.epilink.plz.errorRate = 0.04
matcher.epilink.ort.errorRate = 0.04
matcher.epilink.geburtsdatum.errorRate = 0.005



# matcher.epilink.threshold.match: Defines the minimum weight (in the interval [0,1])
# for which a pair of records is considered a definite match.
#
# matcher.epilink.threshold_non_match: Defines the weight (in the interval [0,1])
# below which a pair of records is considered a definite non-match. Must be less than or equal
# to matcher.epilink.threshold_match.
#
# Record pairs with a weight w with threshold_non_match <= w < threshold_match are
# considered possible matches and lead to a tentative PID.
matcher.epilink.threshold_match = 0.95
matcher.epilink.threshold_non_match = 0.6


# ID-Generators
#
# idgenerators: A comma-seperated list of identifiers of ID-Generators, corresponding to ID types.
# External id types should be also listed here

# For every generator:
# idgenerator.{identifier}: Class which implements the ID generator.
# additional parameters depend on the ID generator used.
#
idgenerators = pid, intid, extId, dkfz_pid

# these three IDGenerators are used for testing purposes
idgenerator.extId = ExternalIDGenerator
idgenerator.extVisitId = ExternalIDGenerator
idgenerator.intVisitId = SimpleIDGenerator
idgenerator.dkfz_pid = ExternalIDGenerator
# AssociatedIds allow to attach multiple instances of IDs from the same idType to a patient
associatedids.visit.idgenerators = extVisitId, intVisitId

# For externally generated id types (imported from external systems) use ExternalIDGenerator
# idgenerators = pid, intid, extid, elasticid, exportId, cryptoid

# By default, IDs are generated once they are requested (lazy generation).
# Set the following parameter to true if upon creating a patient, IDs of all
# configured types should be created for this patient eagerly. This will also override any existing
# configurations that may have been made in individual "idgenerator" of specific type!
idgenerators.eagerGeneration = false

# list of ID types with which this generator will generate the ID eagerly
#idgenerator.{identifier}.eager = {identifier}, {identifier}, {identifier}
# ID will be generated, if any of the configured IDs of the same patient are created
#idgenerator.{identifier}.eager = *
#
# Specify whether the generated ID must be always encrypted before exposing it to the outside via
# the REST API. refer to an existing encryption configuration (@see "crypto.cipher.{name}.type")
#idgenerator.{identifier}.encryption = exportIdEncryption
#
# Specify the decryption algorithm to decrypt encrypted IDs received from the REST API.
# refer to an existing decryption configuration (@see "crypto.cipher.{name}.type")
#idgenerator.{identifier}.decryption = inputIdEncryption

# Additional params for PIDGenerator (k1, k2, k3, rndwidth) are defined here.
idgenerator.pid = PIDGenerator
idgenerator.pid.k1 = 1
idgenerator.pid.k2 = 2
idgenerator.pid.k3 = 3
# rndwidth is optional (default 0)
idgenerator.pid.rndwidth = 0

idgenerator.intid = SimpleIDGenerator

# ElasticIDGenerator is used for randomly generated id types with the flexible length and vocabulary
# Additional params for ElasticIDGenerator are defined here.
# idgenerator.elasticid = ElasticIDGenerator
# idgenerator.elasticid.vocabulary = 23456789ACDEFGHJKMNPQURTUVWXYZ
# idgenerator.elasticid.length = 7

# For externally generated id types (imported from external systems) use ExternalIDGenerator
idgenerator.extid = ExternalIDGenerator
# You can specify a format using a regex String, analogous to validators. Example: any number between 1 and 9999999 is a valid ID
#idgenerator.extid.format = [1-9][0-9]?[0-9]?[0-9]?[0-9]?[0-9]?[0-9]?

# For transient id types which are generated by symmetric encryption methods use CryptoIDGenerator
# Used for IDs generated by encryption of provided persistent id type (baseId)
# NOTE: baseId should always exist und cannot be changed, otherwise the crypto ids receive other values
# idgenerator.cryptoid = CryptoIDGenerator
# idgenerator.cryptoid.baseId = pid
# idgenerator.cryptoid.cipher = standortIdEncryption

# For large (pseudo-)random integers as IDs you can use BigIntegerIDGenerator
# idgenerator.bigintId = BigIntegerIDGenerator
# this is the (decimal) length of digits of an ID
# idgenerator.bigintId.length = 8
# an iterator that will be used to calculate the next ID
# idgenerator.bigintId.iter = 73311337
# (optional) a prefix to add at the beginning of each ID
# idgenerator.bigintId.prefix = 1234
# (optional) a suffix to add at the end of each ID
# idgenerator.bigintId.suffix = 4321
# (optional) you can specify rnd to control the seed for the random number generator
# idgenerator.bigintId.rnd = 123456

# ! EXPERIMENTAL FEATURE ! configuration is subject to change in a future release. A migration guideline will be provided
# generate id from an external federated patient list
# idgenerator.federatedCodexId = FederatedIDGenerator
# data send to the federated patient list
# idgenerator.federatedCodexId.request.data.recordBloomFilter = fttp
# idgenerator.federatedCodexId.request.data.study = study
# idgenerator.federatedCodexId.request.data.target = dic_heidelberg
# url of federated patient list
# idgenerator.federatedCodexId.fttp.url =
# idgenerator.federatedCodexId.fttp.authentication.apikey = 1234
# idgenerator.federatedCodexId.fttp.authentication.certificat.keystore.name = PKCS12
# idgenerator.federatedCodexId.fttp.authentication.certificat.keystore.password = 12345
# idgenerator.federatedCodexId.fttp.authentication.certificat.file = /run/secrets/certificate.p12
# idgenerator.federatedCodexId.fttp.authentication.certificat.password = 12345

# Output of result

# Whether to show a result page (defaults to true)
# Set to false if you use a redirect address with "addPatient"-Tokens
# and want the user to be immediately redirected to the calling application.
# Only applicable if a redirect address is defined in a token
result.show = true

# Whether to include Idat in the result page.
result.printIdat = true

# Set a fixed language for the user interface. Must be a language code for which a
# MessageBundle exists in the application. Current valid values are "en" and "de"
# language =

# xDAT servers
#
# Known Permissions / Token Types:
#
# - showSessionIds: see own sessions via GET /sessions
# - createSession: create session via POST /sessions
# - manageSessionPatients: manage the set of patients related to a session
# - callback: the permission to allow callbacks
#	(operations on /sessions/{sessionid}/patients)
#
# - createToken: create tokens -- in addition, permission "tt_x" is req'd, where x is one of these TOKEN TYPES:
#   - tt_addPatient: allows to generate one (1) ID. Token is invalidated afterwards even if an existing ID was returned.
#   - tt_addPatients: allows to add multiple patients.
#	- tt_readPatients: allows to read IDAT or pseudonyms of patients
#   - tt_editPatient: allows to change identifying data of one (1) patient. Token is invalidated afterwards.
#
# readAllPatientIdTypes: allows to read all IdTypes of a patient
# readAllPatientIds: allows to read all Ids of a patient
#

# Allows refined permissions
# example if activated: ;tt_readPatients{|data.searchIds.idType:pid|data.searchIds.idString:*|data.resultFields:geburtsname&vorname|data.resultIds:pid|data.resultIds:intid|data.callback:*};tt_addPatient{data.idtypes:pid}
extendedPermissionCheck = true
#If failed auth message should not send back to requester
#extendedPermissionCheck.failedAuthMessage = deactivated
#extendedPermissionCheck.caseSensitive = true

# OAuth authentication
oidc.auth0.iss=https://dev-ptsul9wq.eu.auth0.com/

claims.0.permissions = createToken;tt_addPatient;tt_readPatients;tt_editPatient
claims.0.auth=OIDC
claims.0.oidc.operator=AND
claims.0.oidc.iss=auth0
claims.0.oidc.sub=auth0|5f026a16920eff001996f9a5

claims.1.permissions = createSession;showSessionIds
claims.1.auth=OIDC
claims.1.oidc.operator=AND
claims.1.oidc.iss=auth0
claims.1.oidc.http\://mainzelliste.de/roles=admin

# A passphrase used for authentication
servers.0.apiKey = Mainzelliste2023
# Monitoring permissions: getPatientCount;getTentativePatientCount;getIDRequestCount;getCpuInfo;getMemoryInfo
servers.0.permissions = createSession;showSessionIds;createToken;tt_addPatient;tt_readPatients;tt_editPatient

servers.0.allowedRemoteAdresses = 0.0.0.0/0;127.0.0.1:8080
# Accepted origin addresses (IPv4 and/or IPv6) or address ranges in CIDR notation (IPv4 only)

# Allow only requests from localhost (e.g. for developing)
#servers.0.allowedRemoteAdresses = 127.0.0.1;0:0:0:0:0:0:0:1

# Allow requests from a typical private network
# servers.0.allowedRemoteAdresses = 192.168.56.0/24

# Allow combination of both
# servers.0.allowedRemoteAdresses = 127.0.0.1;0:0:0:0:0:0:0:1;192.168.56.0/24

#servers.1.apiKey = notAllowedServer
#servers.1.permissions = createSession;showSessionIds;createToken;tt_deletePatient;tt_addPatient;tt_readPatients;tt_editPatient;tt_deleteAllPatients
#servers.1.allowedRemoteAdresses = 172.19.255.255;127.0.0.1;0:0:0:0:0:0:0:1

# Allowed origins for cross origin resource sharing (CORS), multiple values separated by ";"
# servers.allowedOrigins = https://mdat-server.example.org
# Configuration for CORS Preflight configuration. Corresponding headers will be added to response on the preflight
# servers.allowedHeaders = mainzellisteApiKey;mainzellisteApiVersion
# servers.allowedMethods = OPTIONS;GET;POST
# servers.allowedMaxAge = 600

# Allowed Format of callback
callback.allowedFormat = https://.*
callback.allowSelfsigned = false

# Proxy Configuration
## This is only needed then running the Mainzelliste behind the proxy and using one of the following features: Callbacks, Subconfigurations
# proxy.http.host=proxy
# proxy.http.port=3128
# proxy.http.username=foo
# proxy.http.password=changeme
# proxy.https.host=proxy
# proxy.https.port=3128
# proxy.https.username=foo
# proxy.https.password=changeme
## To deactivate the proxy for private ip addresses as defined in RFC1918 set this to true:
# proxy.bypass.private.networks=false

# Session timeout
# A session will be deleted if not accessed for this amount of time, specified in minutes
# Default value if not specified: 10
# sessionTimeout = 10

# Operator information of the Mainzelliste operator to display around user forms
# (defaults to empty/invisible):
# - Contact: Text to be displayed below all forms
# - Logo: Path to image to be displayed in the upper right corner. This can either be an absolute path
#         in the file system, a path within the .war file or a path relative to META-INF/resource
#         within a .jar file on the class path (e.g. a dependency).

# operator.contact =

# Logo file: example for absolute path
# operator.logo = /etc/mainzelliste/logo.png

# Logo file: example for relative path in .war file
# operator.logo = /WEB-INF/classes/logo.png

# Logo file: example for file in META-INF/resources within a .jar file on the classpath
# operator.logo = /logo.png

# custom configuration
# subConfiguration.{n}.uri = https://www.example.org/mainzelliste.sub.conf
# subConfiguration.{n}.uri = file:///etc/mainzelliste/mainzelliste.sub.conf

# gui configuration
# url of control number generator
# gui.cng.url = http://localhost:8080/paths_war/paths/getIdToken
# gui.cng.apiKey = test
# version of mainzelliste (ml) rest api
# gui.ml.apiVersion = 3.0

# CRYPTOGRAPHIC
# -------------

# * Key Configuration:
# --------------------
# Format: crypto.key.{name}.{property}
#
# the keys can be referenced by their name in other configuration definitions
# (@see crypto.cipher.{name}.key)
#
# 1. key: configure the type of the encryption key:
# - JCEPublicKey : a binary encoded (DER) rsa public key.
# - JCEPrivateKey : a binary encoded (DER) rsa private key.
# - TinkKeySet : Tink KeySet in json format
# e.g.: crypto.key.exportIdPublicKey.type = JCEPublicKey
#
# 2. uri: only file uri are supported
# e.g.: crypto.key.exportIdPublicKey.uri = file:///etc/resources/keys/public.der

# * Cipher Configuration:
# ---------------------------
# Format: crypto.cipher.{name}.{property}
#
# the cipher can be referenced by their name in other configuration definitions
# (e.g. idgenerator.{idName}.encryption)
# (e.g. idgenerator.{idName}.decryption)
# (e.g. with CryptoIDGenerator : idgenerator.{idName}.cipher)
#
# 1. key: take a reference of an existing key configuration @see crypto.key.{name}.type
# crypto.cipher.exportIdEncryption.key = exportIdPublicKey
#
# 2. type: configure the type of the cipher:
#  * Encryption Cipher :
#    - JCERsaEncryption : rsa asymmetric encryption with ECB/OAEPWithSHA-1AndMGF1Padding
#    - TinkHybridEncryption : hybrid encryption with Tink (ECIES with AEAD and HKDF). The plaintext is
#      encrypted with a new generated symmetric key and the asymmetric public key is used to encrypt
#      the symmetric key only. resulting ciphertext = symmetric ciphertext + encrypted symmetric key.
#  * Decryption Cipher :
#    - JCERsaDecryption : rsa asymmetric decryption with JCE
#    - TinkHybridDecryption : hybrid decryption with Tink (ECIES with AEAD and HKDF)
#  * Symmetric Cipher :
#    - TinkDeterministicAeadCipher : deterministic symmetric encryption with Tink (DeterministicAEAD)
# crypto.cipher.exportIdEncryption.type = JCERsaEncryption